services:
  db:
    image: mysql:8
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: manager
      MYSQL_DATABASE: settlementdb
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  settlement-service:
    image: openjdk:17-jdk-slim  # JDK 17 컨테이너 사용 (Dockerfile 없이 실행)
    container_name: settlement-service
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: settlement-service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/settlementdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: manager
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # 운영에서는 validate 또는 none 추천
      SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_USE_SQL_COMMENTS: true
      SPRING_BATCH_JOB_ENABLED: false
      SPRING_BATCH_JDBC_INITIALIZE_SCHEMA: always
      SPRING_BATCH_JDBC_SCHEMA: classpath:org/springframework/batch/core/schema-mysql.sql  # 존재 여부 확인 필요
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CACHE: trace
      JWT_SECRET: ${JWT_SECRET}
      SPRING_CONFIG_LOCATION: classpath:/application-docker.yml  # Docker에서 application-docker.yml만 사용
    volumes:
      - ./build/libs/settlement-service-0.0.1-SNAPSHOT.jar:/app/app.jar  # JAR 파일 마운트
    working_dir: /app
    entrypoint: ["java", "-jar", "app.jar"]  # JAR 실행
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
