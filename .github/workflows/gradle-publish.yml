# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

# .github/workflows/deploy.yml

name: CI/CD - Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub 저장소에서 소스코드 체크아웃
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. JDK 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'

    # 3. Gradle로 jar 빌드
    - name: Build JAR
    # ci cd 워크플로우 나눠서 ci통과 시 테스트 다시 안하도록 조정
      run: ./gradlew clean build -x test

    # 4. EC2에 jar 파일 전송 (scp 방식 : SSH 사용해서 파일 넘김)
    - name: Copy JAR to EC2
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ./build/libs/*.jar
        target: /home/ec2-user/app.jar

    # 5. EC2에서 jar 실행 (환경변수 그대로 설정)
    - name: Run JAR on EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # 기존 실행 중인 애플리케이션 종료
          pkill -f 'java -jar' || true

          # 환경 변수 설정 (docker-compose에서 가져온 것)
          export SPRING_APPLICATION_NAME=settlement-service
          export SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/settlementdb
          export SPRING_DATASOURCE_SLAVE_URL=jdbc:mysql://localhost:3307/settlementdb
          export SPRING_DATASOURCE_USERNAME=root
          export SPRING_DATASOURCE_PASSWORD=manager
          export SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
          export SPRING_DATA_REDIS_HOST=localhost
          export SPRING_DATA_REDIS_PORT=6379
          export SPRING_JPA_HIBERNATE_DDL_AUTO=update
          export SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL=true
          export SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
          export SPRING_JPA_PROPERTIES_HIBERNATE_USE_SQL_COMMENTS=true
          export SPRING_BATCH_JOB_ENABLED=false
          export SPRING_BATCH_JDBC_INITIALIZE_SCHEMA=always
          export SPRING_BATCH_JDBC_SCHEMA=classpath:org/springframework/batch/core/schema-mysql.sql
          export LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CACHE=trace
          export SPRING_CONFIG_LOCATION=classpath:/application-docker.yml

          # jar 실행 (백그라운드)
          nohup java -jar app.jar > app.log 2>&1 &
